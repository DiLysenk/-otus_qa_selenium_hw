{"name": "тест новго товара", "status": "failed", "statusDetails": {"message": "AssertionError: не могу найти элемент по тексту: #9c16c9", "trace": "self = <pageobject.LoginPage.LoginAdminPage object at 0x7fbd1c64e6a0>\ntext = '#9c16c9'\n\n    def _verify_element_by_text(self, text: str):\n        try:\n            self.wait.until(lambda driver: self.browser.execute_script('return document.readyState') == 'complete')\n>           element = self.wait.until(EC.visibility_of_element_located((By.XPATH, f\"//*[text()='{text}']\")))\n\n../pageobject/BasePage.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4a9b410c6fbec1a71aee23a1830a4f54\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7fbd1c5f5220>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../venv/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_e2e.TestOpenCart object at 0x7fbd1c763070>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4a9b410c6fbec1a71aee23a1830a4f54\")>\n\n    @allure.description(\"\"\"Добавление нового контента в список товаров\"\"\")\n    @allure.title('тест новго товара')\n    def test_add_new_item(self, browser):\n        name = myFactory.color()\n        LoginAdminPage(browser).\\\n            forward_to_url(LoginAdminPage.ADMIN_PAGE).\\\n            login_admin()\n        AdminPage(browser).go_to_Products() \\\n            .add_product(name)\n>       assert LoginAdminPage(browser).element_text(name), f\"не найден товар{name}\"\n\ntest_e2e.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pageobject/BasePage.py:108: in element_text\n    return self._verify_element_by_text(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pageobject.LoginPage.LoginAdminPage object at 0x7fbd1c64e6a0>\ntext = '#9c16c9'\n\n    def _verify_element_by_text(self, text: str):\n        try:\n            self.wait.until(lambda driver: self.browser.execute_script('return document.readyState') == 'complete')\n            element = self.wait.until(EC.visibility_of_element_located((By.XPATH, f\"//*[text()='{text}']\")))\n            self.logger.info(f\" найден элемент с текстом {text}\")\n            return element\n        except TimeoutException:\n            self.logger.info(f\"элемент не найден {text}\")\n>           raise AssertionError(f\"не могу найти элемент по тексту: {text}\")\nE           AssertionError: не могу найти элемент по тексту: #9c16c9\n\n../pageobject/BasePage.py:49: AssertionError"}, "description": "Добавление нового контента в список товаров", "attachments": [{"name": "log", "source": "617c770f-596b-4ca1-8cca-436da9fb7f0e-attachment.txt", "type": "text/plain"}], "start": 1626538924732, "stop": 1626538942401, "uuid": "fe77dda9-a29e-489c-a5e0-54a41b52a19f", "historyId": "53f7aa329a867d1c982742397a6f1a14", "testCaseId": "77f264dd879e233d33cded25cd2ff340", "fullName": "tests.test_e2e.TestOpenCart#test_add_new_item", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('loging')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_e2e"}, {"name": "subSuite", "value": "TestOpenCart"}, {"name": "host", "value": "ryzenB450"}, {"name": "thread", "value": "35284-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_e2e"}]}